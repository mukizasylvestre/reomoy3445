
#This file handles the web requests and API endpoints
import logging
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.conf import settings
from django.shortcuts import render
from api.serializers import RouteRequestSerializer
from api.services import route_service, fuel_stop_optimizer

log = logging.getLogger(__name__)

def home(request):
    """
    this is  the home page  display
    """
    return render(request, 'index.html')

class CalculateRouteView(APIView):
    """
    API endpoint to calculate the optimal route and fuel stops between two locations
    """
    # this function will recieve inputs and calculate, finally bring out responce
    def post(self, request):
        """
        Calculate optimal route with fuel stops
        """
        # Validate input
        serializer_input = RouteRequestSerializer(data=request.data)
        if not serializer_input.is_valid():
            return Response(
                {"error": "Invalid input data", "details": serializer_input.errors},
                status=status.HTTP_400_BAD_REQUEST
            )
        #-- input which will of starting point and destination----

        start_location = serializer_input.validated_data['start_location']
        end_location = serializer_input.validated_data['end_location']
        
        try:
            # Get route from start to end
            joney_route = route_service.get_route(start_location, end_location)
            
            # Calculate optimal fuel stops
            optimization_result = fuel_stop_optimizer.optimize_fuel_stops(
                joney_route, 
                vehicle_range=settings.VEHICLE_RANGE_MILES,
                vehicle_mpg=settings.VEHICLE_MPG
            )
            
            # Combine route and optimization data
            response_data = {
                'start_location': {
                    'address': start_location,
                    'lat': joney_route['start_location']['lat'], # this will be used to access staring point location on the map
                    'lng': joney_route['start_location']['lng']
                },
                'end_location': {
                    'address': end_location,
                    'lat': joney_route['end_location']['lat'],
                    'lng': joney_route['end_location']['lng']
                },
                'total_distance_miles': optimization_result['total_distance_miles'],
                'total_gallons_needed': optimization_result['total_gallons_needed'],
                'total_fuel_cost': optimization_result['total_fuel_cost'],
                'fuel_stops': optimization_result['fuel_stops'],
                'polyline': joney_route['polyline'],
                'route_bbox': joney_route['bbox']
            }
            
            return Response(response_data)
            
        except Exception as e:
            log.error(f"Error calculating route: {str(e)}")
            return Response(
                {"error": str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

#----------- this is all about loading my CSV file of fuel prices-----
# Fuel Data Service (api/services/fuel_data_service.py)


import pandas as pd
import logging
import math
import random
from django.conf import settings
from django.core.cache import cache






# Simulated cache (basic Python dict)
cache = {}

# Local path to your CSV file
my_file = 'path/to/your/fuel_prices.csv'

# Cache key
#FUEL_DATA_CACHE_KEY = 'fuel_data'

# Logger
logger = logging.getLogger(__name__)

# US Centroids for each state (approximate lat, lng)
STATE_CENTROIDS = {
    'NY': (42.9538, -75.5268),
    'CA': (37.1841, -119.4696),
    # ... [additional states]
}

def add_approximate_locations(fuel_stations):
    """
    Add approximate latitude and longitude based on state
    """
    for station in fuel_stations:
        centroid = STATE_CENTROIDS.get(station['state'])
        if centroid:
            station['location'] = {'lat': centroid[0], 'lng': centroid[1]}
        else:
            station['location'] = None
    return fuel_stations

def load_fuel_data():
    """
    Load and cache fuel data from the CSV file
    """
    if cache.get('fuel_data') is not None:
        return cache.get('fuel_data')

    try:
        df = pd.read_csv(my_file)
        
        # Clean the data
        df = df.dropna()
        df['Retail Price'] = pd.to_numeric(df['Retail Price'], errors='coerce')
        df = df.dropna(subset=['Retail Price'])

        # Create a clean dataframe with necessary columns
        fuel_data = df[['Truckstop Name', 'Address', 'City', 'State', 'Retail Price']]

        # Convert to dictionary format for easier access
        fuel_stations = []
        for _, row in fuel_data.iterrows():
            station = {
                'name': row['Truckstop Name'],
                'address': row['Address'],
                'city': row['City'],
                'state': row['State'],
                'price': float(row['Retail Price']),
                'location': None
            }
            fuel_stations.append(station)

        # Add approximate locations
        fuel_stations = add_approximate_locations(fuel_stations)

        logger.info(f"Loaded {len(fuel_stations)} fuel stations")
        cache['fuel_data'] = fuel_stations  # storing in cache
        return fuel_stations

    except Exception as e:
        logger.error(f"Error loading fuel data: {str(e)}")
        return []

def get_fuel_data():
    """
    Get cached fuel data or reload if needed
    """
    return cache.get('fuel_data') or load_fuel_data()


 #Route Service (api/services/route_service.py)
  #This service handles route calculation between locations:


import polyline
import random
import math
from django.conf import settings
from django.core.cache import cache

# US city coordinates lookup for demo purposes
US_CITIES = {
    'new york': (40.7128, -74.0060),
    'los angeles': (34.0522, -118.2437),
    'chicago': (41.8781, -87.6298),
    # ... [additional cities]
}

def get_route(start_location, end_location):
    """
    Get route details between two locations
    Uses MapQuest if available, otherwise generates a reasonable fallback route
    """
    try:
        start_lat, start_lng = geocode_location(start_location)
        end_lat, end_lng = geocode_location(end_location)
        
        # Calculate direct distance using Haversine formula
        total_distance_miles = calculate_haversine_distance(start_lat, start_lng, end_lat, end_lng)
        
        # Create a polyline that represents a direct path
        route_polyline = create_direct_polyline(start_lat, start_lng, end_lat, end_lng)
        
        # Calculate bounding box
        min_lat = min(start_lat, end_lat)
        max_lat = max(start_lat, end_lat)
        min_lng = min(start_lng, end_lng)
        max_lng = max(start_lng, end_lng)

        # Get states that might be on the route
        states = get_states_between(start_location, end_location)
        
        # Create route data
        route_data = {
            'start_location': {
                'address': start_location,
                'lat': start_lat,
                'lng': start_lng
            },
            'end_location': {
                'address': end_location,
                'lat': end_lat,
                'lng': end_lng
            },
            'total_distance_miles': total_distance_miles,
            'polyline': route_polyline,
            'bbox': [min_lng, min_lat, max_lng, max_lat],
            'states': states
        }
        
        return route_data
    
    except Exception as e:
        raise ValueError(f"Could not get route: {str(e)}")

    

 #Fuel Stop Optimizer (api/services/fuel_stop_optimizer.py)
#This service optimizes fuel stops along a route:

import math
import random
from django.conf import settings
from api.services import fuel_data_service, route_service

def optimize_fuel_stops(route, vehicle_range=None, vehicle_mpg=None):
    """
    Find optimal fuel stops along a route to minimize total fuel cost
    """
    if vehicle_range is None:
        vehicle_range = settings.VEHICLE_RANGE_MILES
    
    if vehicle_mpg is None:
        vehicle_mpg = settings.VEHICLE_MPG
    
    # Get route details
    total_distance = route['total_distance_miles']
    
    # If route is within vehicle range, no stops needed
    if total_distance <= vehicle_range:
        return {
            'total_distance_miles': total_distance,
            'total_gallons_needed': total_distance / vehicle_mpg,
            'total_fuel_cost': 0,
            'fuel_stops': []
        }
    
    try:
        # Generate evenly spaced fuel stops
        total_gallons = total_distance / vehicle_mpg
        
        # Calculate number of stops needed based on vehicle range
        effective_range = vehicle_range * 0.8  # 80% of max range for safety
        num_stops_needed = math.ceil(total_distance / effective_range) - 1
        
        # Generate fuel stops at optimal positions
        fuel_stops = []
        for i in range(1, num_stops_needed + 1):
            position = (i * total_distance) / (num_stops_needed + 1)
            fuel_stop = find_station_near_position(position, route)
            fuel_stops.append(fuel_stop)
        
        # Calculate total fuel cost
        total_fuel_cost = sum(stop['fuel_cost'] for stop in fuel_stops)
        
        return {
            'total_distance_miles': total_distance,
            'total_gallons_needed': total_gallons,
            'total_fuel_cost': total_fuel_cost,
            'fuel_stops': fuel_stops
        }
    
    except Exception as e:
        # Handle errors
        return fallback_optimization(route, vehicle_range, vehicle_mpg)
    


 #Main Settings (fuel_route_api/settings.py)
 #Key settings for the application:



 # Project specific settings 
FUEL_PRICES_FILE = os.path.join(BASE_DIR, 'data', 'fuel-prices-for-be-assessment.csv')
VEHICLE_RANGE_MILES = 500  # Maximum distance in miles before refueling
VEHICLE_MPG = 10  # Miles per gallon
